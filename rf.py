# -*- coding: utf-8 -*-
"""RF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bE1d61kAGWuPi3J-m1g9mGv8pL8435jZ
"""

from google.colab import drive

drive.mount('/content/drive')

import pandas as pd
import numpy as np
from sklearn.datasets import make_classification
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score

file_pathtr ='/content/drive/MyDrive/NSL-KDD dataset/KDDTrain+.txt'
train_data = pd.read_csv(file_pathtr)
file_pathte='/content/drive/MyDrive/NSL-KDD dataset/KDDTest+.txt'
test_data = pd.read_csv(file_pathte)

train_data.head()

test_data.head()

train_data.info()

X_train = train_data.drop('normal', axis=1)
y_train = train_data['normal']
X_test = test_data.drop('neptune', axis=1)
y_test = test_data['neptune']

X = train_data.drop('normal', axis=1)
y = train_data['normal']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train.head()

X_test.head()

from sklearn.preprocessing import LabelEncoder
def le(df):
    df = pd.DataFrame(df)  # Convert NumPy array to pandas DataFrame
    for col in df.columns:
        if df[col].dtype == 'object':
            label_encoder = LabelEncoder()
            df[col] = label_encoder.fit_transform(df[col])
    return df.values  # Convert back to NumPy array if necessary

le(X_train)
le(X_test)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)

X_train_df = pd.DataFrame(X_train)
X_test_df = pd.DataFrame(X_test)
test_cols = set(X_train_df.columns)
train_cols = set(X_test_df.columns)
missing_cols = train_cols.difference(test_cols)
extra_cols = test_cols.difference(train_cols)
print("Missing columns:", missing_cols)
print("Extra columns:", extra_cols)

for col in missing_cols:
    X_test_df[col] = 0
X_test_df.fillna(0, inplace=True)

for col in extra_cols:
  if col in X_train_df.columns:
    X_train_df.drop(col, axis=1, inplace=True)

from sklearn.feature_selection import RFE
from sklearn.ensemble import RandomForestClassifier
import itertools

rf_clf = RandomForestClassifier(random_state=42)
rf_clf.fit(X_train_df, y_train)
rfe = RFE(rf_clf, n_features_to_select=10)
rfe = rfe.fit(X_train_df, y_train)

feature_map = [(i, v) for i, v in itertools.zip_longest(rfe.support_, X_train_df.columns)]
selected_features = [v for i, v in feature_map if i]

y_pred = rf_clf.predict(X_test_df)

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("Accuracy Score:")
print(accuracy_score(y_test, y_pred))

from sklearn.metrics import f1_score, precision_score, recall_score
f= f1_score(y_test, y_pred,average="micro")
p= precision_score(y_test, y_pred,average="weighted",zero_division=1.0)
r= recall_score(y_test, y_pred,average="weighted",zero_division=1.0)
print("f1_score = ",f)
print("Precision Score = ",p)
print("recall score = ",r)

from sklearn.metrics import classification_report
print("Random Forest Classifier:")
print(classification_report(y_test, y_pred))

import joblib
import pickle 
joblib.dump(rf_clf, "rf.pkl")